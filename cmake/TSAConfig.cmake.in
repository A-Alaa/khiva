# Copyright (c) 2018 Grumpy Cat Software S.L.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# TSA
# ---------
#
# IMPORTED Targets
# ^^^^^^^^^^^^^^^^
#
# This is the configuration file for the TSA Library. It provides the
# following :prop_tgt:`IMPORTED` target:
#
# ``Shapelets::tsa``
#   Target for the TSA library.
#
# This target can be used to link with your application using the
# ``target_link_library`` command. Here is an example of how to use this
# target in your application:
#
#   add_executable(mybinary source.cpp)
#   target_link_library(mybinary PRIVATE TSA)
#
# This example creates a mybinary executable from the source.cpp file and links
# against the TSA library. Note you do *not* need to set
# the include directories as they are automatically included with the target.
#
# This is the recommended way of linking against TSA
#
# Legacy Variables
# ^^^^^^^^^^^^^^^^
#
# Additionally, this config file creates the following variables for backward
# compatibility with legacy cmake files:
#
# ``TSA_INCLUDE_DIRS``
#  Path to TSA's include directory.
# ``TSA_LIBRARIES``
#  TSA's libraries. This will default to a GPU backend if one
#  is found.
# ``TSA_FOUND``
#  True if TSA has been located
#
# It is recommended you use imported targets instead of these variables.
#
# You may provide a hint to where TSA's root directory may be located
# by setting TSA_DIR. You should not need to set this if you installed
# TSA using the official installers or the package manager (please submit
# a bug report). If CMake is unable to locate TSA then set the
# TSA_DIR to the directory of this file.
#
# If you are trying to link against a source build then this should be set to
# the build directory.

@PACKAGE_INIT@

set_and_check(TSA_INCLUDE_DIRS @PACKAGE_INCLUDE_DIRS@)

if(NOT TARGET TSA::tsa AND NOT TARGET tsa)
  # Either we are not in the TSA project or the target was not built
  if(EXISTS @PACKAGE_CMAKE_DIR@/TSA.cmake)
    include(@PACKAGE_CMAKE_DIR@/TSA.cmake)
  endif()
endif()

if(TARGET TSA::tsa)
  get_property(config TARGET TSA::tsa PROPERTY IMPORTED_CONFIGURATIONS)
  if(NOT config)
    set(config "NOCONFIG")
  endif()
  get_property(loc TARGET TSA::tsa PROPERTY IMPORTED_LOCATION_${config})
endif()

if((TARGET TSA::tsa AND EXISTS ${loc}) OR TARGET tsa)
  set(TSA_FOUND ON)
  set(TSA_LIBRARIES TSA::tsa)
else()
  set(TSA_FOUND OFF)
endif()

foreach(_comp ${TSA_FIND_COMPONENTS})
  if (NOT TSA_${_comp}_FOUND)
    set(TSA_FOUND False)
    set(TSA_NOT_FOUND_MESSAGE "Required TSA component ${_comp} not found")
  endif()
endforeach()

check_required_components(ArrayFire)
