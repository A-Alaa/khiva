CMAKE_MINIMUM_REQUIRED(VERSION 3.9.6)
PROJECT(TSALIB_EXPERIMENTS)

# Find the ArrayFire package.
FIND_PACKAGE(ArrayFire REQUIRED)

# Compile with C++11 support.
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)

if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

# Avoid conflicts with min and max functions
ADD_DEFINITIONS(-DNOMINMAX)

# Compile using unified backend
ADD_DEFINITIONS(-DAF_UNIFIED)

FILE(GLOB_RECURSE ALL_EXP_CPP *.cpp)

FOREACH(ONE_EXP_CPP ${ALL_EXP_CPP})
   GET_FILENAME_COMPONENT(ONE_BENCH_EXEC ${ONE_EXP_CPP} NAME_WE)
   SET(TARGET_NAME ${ONE_BENCH_EXEC})
   ADD_EXECUTABLE(${TARGET_NAME} ${ONE_EXP_CPP})
   
   SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES OUTPUT_NAME ${ONE_BENCH_EXEC}) 
   TARGET_INCLUDE_DIRECTORIES(${TARGET_NAME} PUBLIC TSALIB ${ArrayFire_INCLUDE_DIRS})
   TARGET_LINK_LIBRARIES(${TARGET_NAME} TSALIB ${ArrayFire_Unified_LIBRARIES} ${CMAKE_DL_LIBS})
ENDFOREACH()
